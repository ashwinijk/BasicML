# -*- coding: utf-8 -*-
"""classifier_assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VYcbpY87JIcOnSZNLjtVzvkai9aAkx8b
"""

import pandas as pd 
import tensorflow as tf

  
# read a data file into the python console
df = pd.read_csv("data.csv")

#To print all the features (columns)
count = 0;
for columns in df:
    count = count+1
    #print(columns)
print("number of features:", count)
print("number of feature instances", df.size)
# We are labeling the status with NORMAL error as 1 and all other errors as 0
for i in range(0,df.status.size):
  if df.status[i] == 'NORMAL':
    df.status[i] = 1
  else: df.status[i] = 0

# We are not considering timestamp
df = df.loc[:, df.columns != 'timestamp']

# status column is fed as lebels in a seperate column
df_train = df.loc[:, df.columns != 'status']

# create labels usinf status column
label = df.status
label=label.astype('int')

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(df_train, label, test_size = 0.20, random_state = 42)

# Logistic regression
from sklearn.linear_model import LogisticRegression
lg = LogisticRegression()
lg.fit(X_train, y_train)
lg.score(X_test, y_test)

# Decision tree classifier
from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier().fit(X_train, y_train)
clf.score(X_test, y_test)

# Random Forest
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators = 100, random_state = 42)
rf.fit(X_train, y_train)
rf.score(X_test, y_test)

# Support Vector Machines
from sklearn.svm import SVC
svm = SVC()
svm.fit(X_train, y_train)
svm.score(X_test, y_test)

# Linear Discriminant Analysis
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis()
lda.fit(X_train, y_train)
lda.score(X_test, y_test)

# K-Nearest Neighbors
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
knn.score(X_test, y_test)

# Gaussian Naive Bayes
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(X_train, y_train)
gnb.score(X_test, y_test)


